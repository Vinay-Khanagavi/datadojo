{
  "questions": [
    {
      "id": 1,
      "problemStatement": "Write a function that adds two numbers",
      "shortTitle": "Add two numbers",
      "testCases": [
        { "input": "2, 3", "expectedOutput": "5" },
        { "input": "-1, 5", "expectedOutput": "4" },
        { "input": "0, 0", "expectedOutput": "0" },
        { "input": "10, -10", "expectedOutput": "0" },
        { "input": "1000, 1", "expectedOutput": "1001" }
      ]
    },
    {
      "id": 2,
      "problemStatement": "Write a function that returns the factorial of a number",
      "shortTitle": "Factorial",
      "testCases": [
        { "input": "5", "expectedOutput": "120" },
        { "input": "0", "expectedOutput": "1" },
        { "input": "1", "expectedOutput": "1" },
        { "input": "10", "expectedOutput": "3628800" }
      ]
    },
    {
      "id": 3,
      "problemStatement": "Write a function to reverse a string",
      "shortTitle": "Reverse string",
      "testCases": [
        { "input": "\"hello\"", "expectedOutput": "\"olleh\"" },
        { "input": "\"world\"", "expectedOutput": "\"dlrow\"" },
        { "input": "\"\"", "expectedOutput": "\"\"" },
        { "input": "\"a\"", "expectedOutput": "\"a\"" }
      ]
    },
    {
      "id": 4,
      "problemStatement": "Write a function to check if a number is prime",
      "shortTitle": "Check prime",
      "testCases": [
        { "input": "2", "expectedOutput": "true" },
        { "input": "4", "expectedOutput": "false" },
        { "input": "13", "expectedOutput": "true" },
        { "input": "1", "expectedOutput": "false" }
      ]
    },
    {
      "id": 5,
      "problemStatement": "Write a function to find the greatest common divisor (GCD) of two numbers",
      "shortTitle": "GCD",
      "testCases": [
        { "input": "12, 15", "expectedOutput": "3" },
        { "input": "100, 10", "expectedOutput": "10" },
        { "input": "7, 13", "expectedOutput": "1" },
        { "input": "18, 24", "expectedOutput": "6" }
      ]
    },
    {
      "id": 6,
      "problemStatement": "Write a function to implement binary search on a sorted array",
      "shortTitle": "Binary search",
      "testCases": [
        { "input": "[1, 2, 3, 4, 5], 3", "expectedOutput": "2" },
        { "input": "[1, 2, 3, 4, 5], 1", "expectedOutput": "0" },
        { "input": "[1, 2, 3, 4, 5], 5", "expectedOutput": "4" },
        { "input": "[1, 2, 3, 4, 5], 6", "expectedOutput": "-1" }
      ]
    },
    {
      "id": 7,
      "problemStatement": "Write a function to find the longest common prefix among an array of strings",
      "shortTitle": "Longest common prefix",
      "testCases": [
        { "input": "[\"flower\", \"flow\", \"flight\"]", "expectedOutput": "\"fl\"" },
        { "input": "[\"dog\", \"racecar\", \"car\"]", "expectedOutput": "\"\"" },
        { "input": "[\"interview\", \"interval\", \"interact\"]", "expectedOutput": "\"inter\"" },
        { "input": "[\"a\", \"b\", \"c\"]", "expectedOutput": "\"\"" }
      ]
    },
    {
      "id": 8,
      "problemStatement": "Write a function to check if a string is a palindrome",
      "shortTitle": "Check palindrome",
      "testCases": [
        { "input": "\"racecar\"", "expectedOutput": "true" },
        { "input": "\"hello\"", "expectedOutput": "false" },
        { "input": "\"madam\"", "expectedOutput": "true" },
        { "input": "\"\"", "expectedOutput": "true" }
      ]
    },
    {
      "id": 9,
      "problemStatement": "Write a function to calculate the Fibonacci number at a given position",
      "shortTitle": "Fibonacci number",
      "testCases": [
        { "input": "0", "expectedOutput": "0" },
        { "input": "1", "expectedOutput": "1" },
        { "input": "6", "expectedOutput": "8" },
        { "input": "10", "expectedOutput": "55" }
      ]
    },
    {
      "id": 10,
      "problemStatement": "Write a function to merge two sorted arrays",
      "shortTitle": "Merge sorted arrays",
      "testCases": [
        { "input": "[1, 3, 5], [2, 4, 6]", "expectedOutput": "[1, 2, 3, 4, 5, 6]" },
        { "input": "[0, 3], [1, 4, 5]", "expectedOutput": "[0, 1, 3, 4, 5]" },
        { "input": "[2], [1, 3, 4]", "expectedOutput": "[1, 2, 3, 4]" }
      ]
    },
    {
      "id": 11,
      "problemStatement": "Write a function to find the maximum sum of a contiguous subarray",
      "shortTitle": "Max subarray sum",
      "testCases": [
        { "input": "[1, -2, 3, 4, -1, 2, 1, -5, 4]", "expectedOutput": "10" },
        { "input": "[4, -1, 2, 1]", "expectedOutput": "6" },
        { "input": "[-2, -3, -1]", "expectedOutput": "-1" }
      ]
    },
    {
      "id": 12,
      "problemStatement": "Write a function to implement quicksort on an array",
      "shortTitle": "Quicksort",
      "testCases": [
        { "input": "[3, 6, 8, 10, 1, 2, 1]", "expectedOutput": "[1, 1, 2, 3, 6, 8, 10]" },
        { "input": "[5, 3, 7, 6, 2]", "expectedOutput": "[2, 3, 5, 6, 7]" },
        { "input": "[2, 2, 2]", "expectedOutput": "[2, 2, 2]" }
      ]
    },
    {
      "id": 13,
      "problemStatement": "Write a function to implement merge sort on an array",
      "shortTitle": "Merge sort",
      "testCases": [
        { "input": "[38, 27, 43, 3, 9, 82, 10]", "expectedOutput": "[3, 9, 10, 27, 38, 43, 82]" },
        { "input": "[4, 2, 5, 1]", "expectedOutput": "[1, 2, 4, 5]" },
        { "input": "[2]", "expectedOutput": "[2]" }
      ]
    },
    {
      "id": 14,
      "problemStatement": "Write a function to rotate an array to the right by k steps",
      "shortTitle": "Rotate array",
      "testCases": [
        { "input": "[1, 2, 3, 4, 5, 6, 7], 3", "expectedOutput": "[5, 6, 7, 1, 2, 3, 4]" },
        { "input": "[-1, -100, 3, 99], 2", "expectedOutput": "[3, 99, -1, -100]" },
        { "input": "[1, 2], 1", "expectedOutput": "[2, 1]" }
      ]
    },
    {
      "id": 15,
      "problemStatement": "Write a function to find the missing number in an array containing n distinct numbers in the range 0 to n",
      "shortTitle": "Find missing number",
      "testCases": [
        { "input": "[3, 0, 1]", "expectedOutput": "2" },
        { "input": "[9, 6, 4, 2, 3, 5, 7, 0, 1]", "expectedOutput": "8" },
        { "input": "[0]", "expectedOutput": "1" }
      ]
    },
    {
      "id": 16,
      "problemStatement": "Write a function to implement the insertion sort algorithm",
      "shortTitle": "Insertion sort",
      "testCases": [
        { "input": "[12, 11, 13, 5, 6]", "expectedOutput": "[5, 6, 11, 12, 13]" },
        { "input": "[4, 3, 2, 1]", "expectedOutput": "[1, 2, 3, 4]" },
        { "input": "[1, 1, 1]", "expectedOutput": "[1, 1, 1]" }
      ]
    },
    {
      "id": 17,
      "problemStatement": "Write a function to implement selection sort on an array",
      "shortTitle": "Selection sort",
      "testCases": [
        { "input": "[64, 25, 12, 22, 11]", "expectedOutput": "[11, 12, 22, 25, 64]" },
        { "input": "[29, 10, 14, 37, 13]", "expectedOutput": "[10, 13, 14, 29, 37]" },
        { "input": "[5]", "expectedOutput": "[5]" }
      ]
    },
    {
      "id": 18,
      "problemStatement": "Write a function to check if an array contains duplicates",
      "shortTitle": "Check duplicates",
      "testCases": [
        { "input": "[1, 2, 3, 1]", "expectedOutput": "true" },
        { "input": "[1, 2, 3, 4]", "expectedOutput": "false" },
        { "input": "[1, 1, 1, 1]", "expectedOutput": "true" }
      ]
    },
    {
      "id": 19,
      "problemStatement": "Write a function to reverse a linked list",
      "shortTitle": "Reverse linked list",
      "testCases": [
        { "input": "[1 -> 2 -> 3 -> 4 -> 5]", "expectedOutput": "[5 -> 4 -> 3 -> 2 -> 1]" },
        { "input": "[1 -> 2]", "expectedOutput": "[2 -> 1]" },
        { "input": "[7]", "expectedOutput": "[7]" }
      ]
    },
    {
      "id": 20,
      "problemStatement": "Write a function to find the intersection node of two singly linked lists",
      "shortTitle": "Intersection of linked lists",
      "testCases": [
        { "input": "[4 -> 1 -> 8 -> 4 -> 5], [5 -> 6 -> 1 -> 8 -> 4 -> 5]", "expectedOutput": "8" },
        { "input": "[1 -> 9 -> 1 -> 2 -> 4], [3 -> 2 -> 4]", "expectedOutput": "2" },
        { "input": "[2 -> 6 -> 4], [1 -> 5]", "expectedOutput": "null" }
      ]
    },
    {
      "id": 21,
      "problemStatement": "Write a function to find the cycle in a linked list",
      "shortTitle": "Detect cycle in linked list",
      "testCases": [
        { "input": "[3 -> 2 -> 0 -> -4] (tail connects to index 1)", "expectedOutput": "true" },
        { "input": "[1 -> 2] (tail connects to index 0)", "expectedOutput": "true" },
        { "input": "[1]", "expectedOutput": "false" }
      ]
    },
    {
      "id": 22,
      "problemStatement": "Write a function to check if two strings are anagrams",
      "shortTitle": "Check anagram",
      "testCases": [
        { "input": "\"anagram\", \"nagaram\"", "expectedOutput": "true" },
        { "input": "\"rat\", \"car\"", "expectedOutput": "false" },
        { "input": "\"listen\", \"silent\"", "expectedOutput": "true" }
      ]
    },
    {
      "id": 23,
      "problemStatement": "Write a function to find the first non-repeating character in a string",
      "shortTitle": "First non-repeating character",
      "testCases": [
        { "input": "\"leetcode\"", "expectedOutput": "l" },
        { "input": "\"loveleetcode\"", "expectedOutput": "v" },
        { "input": "\"aabb\"", "expectedOutput": "-1" }
      ]
    },
    {
      "id": 24,
      "problemStatement": "Write a function to implement the binary search algorithm",
      "shortTitle": "Binary search",
      "testCases": [
        { "input": "[1, 2, 3, 4, 5, 6], 4", "expectedOutput": "3" },
        { "input": "[1, 2, 3, 4, 5], 6", "expectedOutput": "-1" },
        { "input": "[2, 5], 2", "expectedOutput": "0" }
      ]
    },
    {
      "id": 25,
      "problemStatement": "Write a function to find the maximum depth of a binary tree",
      "shortTitle": "Max depth of binary tree",
      "testCases": [
        { "input": "[3, 9, 20, null, null, 15, 7]", "expectedOutput": "3" },
        { "input": "[1, null, 2]", "expectedOutput": "2" },
        { "input": "[]", "expectedOutput": "0" }
      ]
    },
    {
      "id": 26,
      "problemStatement": "Write a function to count the number of islands in a grid",
      "shortTitle": "Number of islands",
      "testCases": [
        { "input": "[['1','1','0','0','0'],['1','1','0','0','0'],['0','0','1','0','0'],['0','0','0','1','1']]", "expectedOutput": "3" },
        { "input": "[['1','0','0'],['0','0','0'],['0','0','0']]", "expectedOutput": "1" },
        { "input": "[['0','0','0'],['0','0','0']]", "expectedOutput": "0" }
      ]
    },
    {
      "id": 27,
      "problemStatement": "Write a function to validate if a string contains valid parentheses",
      "shortTitle": "Valid parentheses",
      "testCases": [
        { "input": "\"()\"", "expectedOutput": "true" },
        { "input": "\"()[]{}\"", "expectedOutput": "true" },
        { "input": "\"(]\"", "expectedOutput": "false" }
      ]
    },
    {
      "id": 28,
      "problemStatement": "Write a function to remove duplicates from a sorted linked list",
      "shortTitle": "Remove duplicates from sorted linked list",
      "testCases": [
        { "input": "[1 -> 1 -> 2]", "expectedOutput": "[1 -> 2]" },
        { "input": "[1 -> 1 -> 2 -> 3 -> 3]", "expectedOutput": "[1 -> 2 -> 3]" },
        { "input": "[1 -> 1]", "expectedOutput": "[1]" }
      ]
    },
    {
      "id": 29,
      "problemStatement": "Write a function to implement the heap sort algorithm",
      "shortTitle": "Heap sort",
      "testCases": [
        { "input": "[12, 11, 13, 5, 6, 7]", "expectedOutput": "[5, 6, 7, 11, 12, 13]" },
        { "input": "[4, 10, 3, 5, 1]", "expectedOutput": "[1, 3, 4, 5, 10]" },
        { "input": "[2]", "expectedOutput": "[2]" }
      ]
    },
    {
      "id": 30,
      "problemStatement": "Write a function to find the kth largest element in an array",
      "shortTitle": "Kth largest element",
      "testCases": [
        { "input": "[3, 2, 1, 5, 6, 4], 2", "expectedOutput": "5" },
        { "input": "[3, 2, 3, 1, 2, 4, 5, 5, 6], 4", "expectedOutput": "4" },
        { "input": "[1], 1", "expectedOutput": "1" }
      ]
    }
  ]
}
